# .github/workflows/android_ci_seguro.yml

name: Android CI Seguro (Todas as Branches)

on:
  push:
    # Rodar em qualquer push para qualquer branch
    branches:
      - '**' 

  pull_request:
    # Rodar em qualquer Pull Request (PR)
    branches:
      - '**' 
      
  workflow_dispatch: # Permite a execução manual na interface do GitHub

jobs:
  build_test_secure_check:
    # Permissões Mínimas de Segurança:
    # - contents: read (para checkout do código)
    # - security-events: write (CRUCIAL para o upload do SARIF do Trivy)
    permissions:
      contents: read 
      security-events: write 

    runs-on: ubuntu-latest
    
    steps:
      - name: 1. Checkout do Código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necessário para o Trivy escanear o histórico, se aplicável

      - name: 2. Configurar JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: 3. Permissões de Execução para Gradle Wrapper
        run: chmod +x gradlew

      # =========================================================
      # 4. Análise de Vulnerabilidades de Dependências com Trivy
      # =========================================================
      - name: 4. Run Trivy vulnerability scanner
        # Fixar a action em uma versão ou SHA é uma boa prática
        uses: aquasecurity/trivy-action@0.20.0 
        with:
          scan-type: 'fs'
          scan-ref: '.'
          
          # Configuração de Quebra de Build (FAIL FAST)
          # A build falhará se encontrar vulnerabilidades Críticas ou Altas.
          exit-code: '1' 
          severity: 'CRITICAL,HIGH' 
          
          # Configuração de Geração de Relatório SARIF (para Code Scanning)
          format: 'sarif'
          limit-severities-for-sarif: false
          output: 'trivy-results.sarif'

      - name: 5. Upload Trivy SARIF results
        # Envia os resultados do Trivy para a aba 'Security' do GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

      - name: 6. Análise Estática de Código (Android Lint)
        # O Lint verifica bugs, usabilidade e algumas falhas de segurança no código.
        run: ./gradlew lintDebug

      - name: 7. Executar Testes Unitários
        run: ./gradlew testDebugUnitTest

      # =========================================================
      # 8. e 9. Build e Upload de Artefatos (OPCIONAL/CONDICIONAL)
      # 
      # Estes passos são pulados em Pull Requests para evitar o uso
      # desnecessário de recursos e o risco de vazamento de segredos.
      # =========================================================
      - name: 8. Montar a Build de Debug
        # Roda apenas em Push (merge/direto na branch), não em Pull Requests
        if: github.event_name != 'pull_request'
        run: ./gradlew assembleDebug

      - name: 9. Upload do Artefato (APK)
        # Roda apenas se não for PR e a build foi bem-sucedida
        if: github.event_name != 'pull_request' && success()
        uses: actions/upload-artifact@v4
        with:
          # O nome do arquivo incluirá o nome da branch para facilitar a identificação
          name: app-debug-apk-${{ github.ref_name }} 
          path: app/build/outputs/apk/debug/app-debug.apk